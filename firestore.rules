rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection
    match /users/{userId} {
      // Allow create if user is authenticated (e.g., during registration)
      allow create: if request.auth != null && request.auth.uid == userId;

      // Allow read if user is authenticated AND it's their own document OR if the requesting user is an admin
      allow read: if request.auth != null && 
                    (request.auth.uid == userId || 
                     get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      
      // Allow update if user is authenticated AND it's their own document
      allow update: if request.auth != null && request.auth.uid == userId;
      
      // Deleting users might be an admin-only function, or handled by Firebase Functions for cleanup.
      // For now, disallow direct client-side delete to prevent accidental/malicious deletions.
      allow delete: if false; 
    }

    // Add rules for other collections as needed
    // Example:
    // match /products/{productId} {
    //   allow read: if true; // Publicly readable products
    //   allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'; // Admin can write products
    // }
  }
}
