rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection
    match /users/{userId} {
      // Allow a user to read their own profile.
      allow read: if request.auth != null && request.auth.uid == userId;
      
      // Allow a user to create their own profile document upon registration.
      // This rule might be tightened if creation is only handled server-side or by onAuthStateChanged logic.
      allow create: if request.auth != null && request.auth.uid == userId;
      
      // Allow a user to update their own profile, but not their role.
      allow update: if request.auth != null && request.auth.uid == userId
                    && !(request.resource.data.role is string && request.resource.data.role != resource.data.role); // Prevent self-role change
      
      // Allow a user to delete their own profile document.
      // Deleting the Auth user record should ideally be handled via Admin SDK or a Cloud Function for atomicity.
      allow delete: if request.auth != null && request.auth.uid == userId;
    }

    // Admin access to users collection
    match /users/{userId} {
      // Admins can read any user's profile.
      allow read: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      
      // Admins can update any user's profile, including their role.
      allow update: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';

      // Admins can delete any user's profile document.
      allow delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Placeholder for other collections - adjust as needed
    // match /products/{productId} {
    //   allow read: if true; // Example: public read
    //   allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'; // Example: admin write
    // }
    
    // match /orders/{orderId} {
    //  allow read, write: if request.auth != null && request.auth.uid == resource.data.userId; // User can access their own orders
    //  allow read: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'; // Admin can read all orders
    // }

    // match /blog/{postId} {
    //  allow read: if true; // Public read for blog posts
    //  allow write: if request.auth != null && 
    //                 (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' ||
    //                  get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'editor'); // Admin or editor can write
    // }
  }
}
